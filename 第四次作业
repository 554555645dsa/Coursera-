sigmoidGradient.m：
g = sigmoid(z).*(1 - sigmoid(z));

randInitializeWeights.m：
epsilon_init = 0.12;
W = rand(L_out, 1 + L_in) * 2 * epsilon_init - epsilon_init;

nnCostFunction.m：//简单地说就是把之前的分类问题的部分代码重复三遍，搞清楚三层之间的关系就好
X = [ones(m,1) X];
z2 = X * Theta1';
a2 = sigmoid(z2);
a2 = [ones(m,1) a2];
z3 = a2 * Theta2';
a3 = sigmoid(z3);
y_com = zeros(m, num_labels);

for c = 1:m
  y_com(c, y(c))=1;
end
chanTheta1 = Theta1(:,2:input_layer_size+1);
chanTheta2 = Theta2(:,2:hidden_layer_size+1);
J = sum((-y_com.*log(a3)-(1-y_com).*log(1-a3))(:))/m + lambda/(2*m)*(sum((chanTheta1.^2)(:))+sum((chanTheta2.^2)(:)));

sanjiao_2 = zeros(size(Theta2));
sanjiao_1 = zeros(size(Theta1));
for t = 1:m
  a_1 = X(t,:)';
  z_2 = Theta1 * a_1;
  a_2 = sigmoid(z_2);
  a_2 = [1 ; a_2];
  z_3 = Theta2 * a_2;
  a_3 = sigmoid(z_3);
  y_t = zeros(num_labels, 1);
  y_t(y(t)) = 1;
  delta_3 = a_3 - y_t;
  delta_2 = Theta2' * delta_3 .* [1 ; sigmoidGradient(z_2)];
  delta_2 = delta_2(2:end);
  sanjiao_2 = sanjiao_2 + delta_3 * a_2';
  sanjiao_1 = sanjiao_1 + delta_2 * a_1';
end
chan2Theta2 = [zeros(num_labels,1) chanTheta2];
chan2Theta1 = [zeros(hidden_layer_size,1) chanTheta1];
Theta2_grad = 1/m .* sanjiao_2 + lambda/m .* chan2Theta2;
Theta1_grad = 1/m .* sanjiao_1 + lambda/m .* chan2Theta1;
